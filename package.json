{
  "name": "vanillatte",
  "version": "0.0.0",
  "type": "module",
  "description": "Vanillatte",
  "scripts": {
    "// *  Start API (mock)                                                                   ": "",
    "start:mock:backend": "nodemon --exec 'NODE_ENV=mock node' src/mock/server/backend/serve.js",
    "// *  Start SPA (mock)                                                                   ": "",
    "start:mock:frontend": "nodemon --exec 'NODE_ENV=mock node' src/mock/server/frontend/serve.js",
    "// *  Start SPA (mock) and API (mock)                                                    ": "",
    "start:mock": "npm run start:mock:frontend & npm run start:mock:backend",
    "// *  Build application                                                                  ": "",
    "build:dev": "webpack --config=webpack.config.cjs --define-process-env-node-env=dev",
    "// *  Clean up Docker containers, images, networks, and volumes                          ": "",
    "docker:cleanup": "docker rm -f $(docker ps -aq) && docker rmi -f $(docker images -aq) && docker network prune -f && docker volume prune -f",
    "// *  Build Docker image (local)                                                         ": "",
    "docker:build:local": "TODO",
    "// *  Run Docker container (local)                                                       ": "",
    "docker:run:local": "TODO",
    "// *  Start Docker container (local) and api with mock data                              ": "",
    "docker:start:mock": "TODO",
    "// *  Build Docker image (dev)                                                           ": "",
    "docker:build:dev": "docker build -t vanillatte:v0 .",
    "// *  Run Docker container (dev)                                                         ": "",
    "docker:run:dev": "docker run -d -p 80:80 vanillatte:v0",
    "// *  Start Docker container (dev)                                                       ": "",
    "docker:start:dev": "npm run docker:build:dev && npm run docker:run:dev",
    "// *  Deploy to Azure Container Registry (ACR)                                           ": "",
    "deploy:acr": "sh scripts/deployment/azure/container-registry.sh"
  },
  "dependencies": {},
  "devDependencies": {
    "@swc/core": "^1.4.11",
    "@typescript-eslint/eslint-plugin": "^7.5.0",
    "@typescript-eslint/parser": "^7.5.0",
    "css-loader": "^6.10.0",
    "express": "^4.19.2",
    "html-loader": "^5.0.0",
    "html-webpack-plugin": "^5.6.0",
    "lefthook": "^1.6.7",
    "nodemon": "^3.1.0",
    "postcss-loader": "^8.1.1",
    "swc-loader": "^0.2.6",
    "typescript": "^5.4.4",
    "webpack": "^5.91.0",
    "webpack-cli": "^5.1.4"
  }
}
